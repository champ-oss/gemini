// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/champ-oss/gemini/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCommits mocks base method.
func (m *MockRepository) AddCommits(commits []*model.Commit) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommits", commits)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommits indicates an expected call of AddCommits.
func (mr *MockRepositoryMockRecorder) AddCommits(commits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommits", reflect.TypeOf((*MockRepository)(nil).AddCommits), commits)
}

// AddPullRequestCommits mocks base method.
func (m *MockRepository) AddPullRequestCommits(pullRequests []*model.PullRequestCommit) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPullRequestCommits", pullRequests)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPullRequestCommits indicates an expected call of AddPullRequestCommits.
func (mr *MockRepositoryMockRecorder) AddPullRequestCommits(pullRequests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPullRequestCommits", reflect.TypeOf((*MockRepository)(nil).AddPullRequestCommits), pullRequests)
}

// AddTerraformRefs mocks base method.
func (m *MockRepository) AddTerraformRefs(runs []*model.TerraformRef) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTerraformRefs", runs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTerraformRefs indicates an expected call of AddTerraformRefs.
func (mr *MockRepositoryMockRecorder) AddTerraformRefs(runs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTerraformRefs", reflect.TypeOf((*MockRepository)(nil).AddTerraformRefs), runs)
}

// AddWorkflowRuns mocks base method.
func (m *MockRepository) AddWorkflowRuns(runs []*model.WorkflowRun) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowRuns", runs)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWorkflowRuns indicates an expected call of AddWorkflowRuns.
func (mr *MockRepositoryMockRecorder) AddWorkflowRuns(runs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowRuns", reflect.TypeOf((*MockRepository)(nil).AddWorkflowRuns), runs)
}

// GetWorkflowRunsByName mocks base method.
func (m *MockRepository) GetWorkflowRunsByName(owner, repo, branch, name string) []*model.WorkflowRun {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunsByName", owner, repo, branch, name)
	ret0, _ := ret[0].([]*model.WorkflowRun)
	return ret0
}

// GetWorkflowRunsByName indicates an expected call of GetWorkflowRunsByName.
func (mr *MockRepositoryMockRecorder) GetWorkflowRunsByName(owner, repo, branch, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunsByName", reflect.TypeOf((*MockRepository)(nil).GetWorkflowRunsByName), owner, repo, branch, name)
}
