// Code generated by MockGen. DO NOT EDIT.
// Source: adapter/adapter.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	model "github.com/champ-oss/gemini/model"
	gomock "github.com/golang/mock/gomock"
)

// MockGitClient is a mock of GitClient interface.
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient.
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance.
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// GetCommits mocks base method.
func (m *MockGitClient) GetCommits(owner, repo, branch string) ([]*model.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommits", owner, repo, branch)
	ret0, _ := ret[0].([]*model.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommits indicates an expected call of GetCommits.
func (mr *MockGitClientMockRecorder) GetCommits(owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommits", reflect.TypeOf((*MockGitClient)(nil).GetCommits), owner, repo, branch)
}

// GetCommitsForFile mocks base method.
func (m *MockGitClient) GetCommitsForFile(owner, repo, branch, filePath string) ([]*model.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitsForFile", owner, repo, branch, filePath)
	ret0, _ := ret[0].([]*model.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitsForFile indicates an expected call of GetCommitsForFile.
func (mr *MockGitClientMockRecorder) GetCommitsForFile(owner, repo, branch, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitsForFile", reflect.TypeOf((*MockGitClient)(nil).GetCommitsForFile), owner, repo, branch, filePath)
}

// GetContents mocks base method.
func (m *MockGitClient) GetContents(owner, repo, filePath, ref string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", owner, repo, filePath, ref)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContents indicates an expected call of GetContents.
func (mr *MockGitClientMockRecorder) GetContents(owner, repo, filePath, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockGitClient)(nil).GetContents), owner, repo, filePath, ref)
}

// GetDefaultBranch mocks base method.
func (m *MockGitClient) GetDefaultBranch(owner, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", owner, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockGitClientMockRecorder) GetDefaultBranch(owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockGitClient)(nil).GetDefaultBranch), owner, repo)
}

// GetPullRequestCommits mocks base method.
func (m *MockGitClient) GetPullRequestCommits(owner, repo string, number int) ([]*model.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestCommits", owner, repo, number)
	ret0, _ := ret[0].([]*model.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestCommits indicates an expected call of GetPullRequestCommits.
func (mr *MockGitClientMockRecorder) GetPullRequestCommits(owner, repo, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestCommits", reflect.TypeOf((*MockGitClient)(nil).GetPullRequestCommits), owner, repo, number)
}

// GetPullRequests mocks base method.
func (m *MockGitClient) GetPullRequests(owner, repo, state string) ([]*model.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequests", owner, repo, state)
	ret0, _ := ret[0].([]*model.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequests indicates an expected call of GetPullRequests.
func (mr *MockGitClientMockRecorder) GetPullRequests(owner, repo, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequests", reflect.TypeOf((*MockGitClient)(nil).GetPullRequests), owner, repo, state)
}

// GetWorkflowRunAttempt mocks base method.
func (m *MockGitClient) GetWorkflowRunAttempt(owner, repo, branch string, runID int64, attemptNumber int) (*model.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunAttempt", owner, repo, branch, runID, attemptNumber)
	ret0, _ := ret[0].(*model.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRunAttempt indicates an expected call of GetWorkflowRunAttempt.
func (mr *MockGitClientMockRecorder) GetWorkflowRunAttempt(owner, repo, branch, runID, attemptNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunAttempt", reflect.TypeOf((*MockGitClient)(nil).GetWorkflowRunAttempt), owner, repo, branch, runID, attemptNumber)
}

// GetWorkflowRuns mocks base method.
func (m *MockGitClient) GetWorkflowRuns(owner, repo, branch string) ([]*model.WorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRuns", owner, repo, branch)
	ret0, _ := ret[0].([]*model.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRuns indicates an expected call of GetWorkflowRuns.
func (mr *MockGitClientMockRecorder) GetWorkflowRuns(owner, repo, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRuns", reflect.TypeOf((*MockGitClient)(nil).GetWorkflowRuns), owner, repo, branch)
}
